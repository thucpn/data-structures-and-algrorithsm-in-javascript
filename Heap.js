/**
 * Hi·ªán th·ª±c Heap t·ª´ array
 */

class Heap {
  constructor(initArray, heapType) {
    this.heapType = heapType || 'maxHeap'; // default is maxHeap
    this.data = this._buildHeap(initArray);
  }

  top() {
    return this.data[0];
  } // O(1)

  get(index) {
    return this.data[index];
  } // O(1)

  search(value) {
    return this.data.indexOf(value);
  } // O(n)

  remove(index) {
    const result = this.data[index];

    // ƒë·ªïi th√®n ·ªü cu·ªëi m·∫£ng l√™n v·ªã tr√≠ xo√°
    this.data[index] = this.data[this.data.length - 1];
    this.data.pop();

    // d·ªãch chuy·ªÉn n√≥ xu·ªëng d∆∞·ªõi t·ª´ t·ª´ cho ƒë√∫ng th·ª© t·ª± trong heap
    this._shiftDown(index);

    return result;
  } // O(logn)

  enqueue(value) {
    // th√™m d·ªØ li·ªáu m·ªõi v√†o cu·ªëi m·∫£ng
    this.data.push(value);

    // d·ªãch chuy·ªÉn n√≥ l√™n tr√™n cho ƒë√∫ng th·ª© t·ª± trong heap
    this._shiftUp(this.data.length - 1);

    return value;
  } // O(logn)

  dequeue() {
    return this.remove(0);
  } // O(logn)

  // thay ƒë·ªïi gi√° tr·ªã t·∫°i 1 v·ªã tr√≠
  update(index, newValue) {
    const oldValue = this.data[index];
    this.data[index] = newValue;

    // TH1: Trong max heap, ta ∆∞u ti√™n ph·∫ßn t·ª≠ c√≥ gi√° tr·ªã c√†ng l·ªõn c√†ng t·ªët
    // N·∫øu gi√° tr·ªã m·ªõi l·ªõn h∆°n gi√° tr·ªã c≈© th√¨ shiftUp l√™n tr√™n
    // N·∫øu gi√° tr·ªã m·ªõi nh·ªè h∆°n gi√° tr·ªã c≈© th√¨ shiftDown xu·ªëng d∆∞·ªõi
    if (this.heapType === 'maxHeap') {
      if (newValue > oldValue) this._shiftUp(index);
      else this._shiftDown(index);
    }
    // TH2: Trong min heap, ta ∆∞u ti√™n ph·∫ßn t·ª≠ c√≥ gi√° tr·ªã c√†ng nh·ªè c√†ng t·ªët
    // N·∫øu gi√° tr·ªã m·ªõi nh·ªè h∆°n gi√° tr·ªã c≈© th√¨ shiftUp l√™n tr√™n
    // N·∫øu gi√° tr·ªã m·ªõi l·ªõn h∆°n gi√° tr·ªã c≈© th√¨ shiftDown xu·ªëng d∆∞·ªõi
    else {
      if (newValue < oldValue) this._shiftUp(index);
      else this._shiftDown(index);
    }

    return newValue;
  } // O(logn)

  heapSort() {
    const temp = [...this.data];
    const newArray = [];

    while (this.data.length > 0) newArray.push(this.dequeue());

    this.data = temp;

    return newArray;
  } // O(nlogn)

  _buildHeap(array) {
    /**
     * PH√ÇN T√çCH
     *
     * Ta gi·∫£ s·ª≠ ƒë·∫ßu v√†o l√† 1 array ng·∫´u nhi√™n: [7, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17]
     * Ta gi·∫£ ƒë·ªãnh ƒëang x√¢y d·ª±ng 1 maxHeap
     * T·ª´ array tr√™n ta v·∫Ω ƒë∆∞·ª£c 1 Complete Binary Tree nh∆∞ sau
     *
     *               7
     *            /     \
     *          3         5
     *        /   \     /   \
     *       4     6   13   10
     *      / \   / \
     *     9   8 15 17
     *
     * - √ù t∆∞·ªüng c·ªßa thu·∫≠t to√°n l√† ƒëi t·ª´ node cu·ªëi c√πng l√™n node root (bottom up), t·∫°i m·ªói node ta s·∫Ω heapify c√¢y con
     *    c√≥ root l√† node ƒë√≥
     * - Heapify 1 c√¢y con l√† vi·ªác ch√∫ng ta bi·∫øn c√¢y con th√†nh 1 heap con b·∫±ng c√°ch th·ª±c hi·ªán c√°c ho√°n ƒë·ªïi sao cho ph·∫ßn t·ª≠
     *    gi√° tr·ªã l·ªõn nh·∫•t trong c√¢y con l√™n l√†m root c·ªßa c√¢y con ƒë√≥. Qu√° tr√¨nh ƒë∆∞·ª£c ƒë·ªá quy li√™n t·ª•c xu·ªëng c√°c c√¢y con c·ªßa
     *    c√¢y con ƒë√≥.
     * - Ch·∫≥ng h·∫°n t·∫°i node 4, ta chuy·ªÉn c√¢y con t·∫°i ƒë√≥ th√†nh 1 heap con nh∆∞ sau:
     *
     *         4                        9
     *       /   \        ==>         /   \
     *      9     8                  4     8
     *
     * - Ta nh·∫≠n th·∫•y, v√¨ c√°c leaf s·∫Ω kh√¥ng c√≥ c√¢y con n√™n ta kh√¥ng nh·∫•t thi·∫øt ph·∫£i l·∫∑p h·∫øt t·ª´ cu·ªëi t·ªõi root m√† ch·ªâ
     *    c·∫ßn loop t·ª´ internal node cu·ªëi c√πng t·ªõi root
     *
     * - M·ªôt ƒëi·ªÅu ƒë·∫∑c bi·ªát trong Complete Binary Tree: leaf cu·ªëi c√πng s·∫Ω c√≥ cha l√† internal node cu·ªëi c√πng. Ch·∫≥ng h·∫°n,
     *    ƒë·ªëi v·ªõi tree tr√™n th√¨ leaf cu·ªëi c√πng(17) c√≥ cha l√† internal node cu·ªëi c√πng(6). M·∫∑c kh√°c, trong array, leaf
     *    cu·ªëi c√πng c√≥ index: lastLeftIndex = n - 1. T·ª´ ƒë√≥ theo c√¥ng th·ª©c parent(index) = (index - 1) / 2 ta c√≥ index
     *    c·ªßa internal node cu·ªëi c√πng l√†: lastInternalNodeIndex = lastLeftIndex - 1 / 2 = (n-2)/2 = n/2 - 1. ƒê·ªëi v·ªõi
     *    tree tr√™n, lastLeftIndex = n - 1 = 11 - 1 = 10 -> lastInternalNodeIndex = 4
     *
     * üèπ T√≥m l·∫°i ta s·∫Ω loop t·ª´ cu·ªëi l√™n ƒë·∫ßu(t·ª´ lastInternalNode l√† 6 t·ªõi node root l√† 7). T·∫°i m·ªói node, ta s·∫Ω heapify
     *      c√¢y con c√≥ root l√† node ƒë√≥. Chi ph√≠ l·∫∑p l√† O(n) v√† chi ph√≠ c·ªßa 1 l·∫ßn heapify l√† O(logn) -> chi ph√≠ c·ªßa vi·ªác
     *      build heap t·ª´ array l√† O(nlogn)
     *
     * - Ngo√†i c√°ch bottom up, ta c≈©ng c√≥ th·ªÉ top down. T·ª©c l√†, ƒëi t·ª´ root ƒë·∫ßu t·ªõi cu·ªëi. T·∫°i m·ªói node, ta s·∫Ω shiftUp
     *    (ƒë·∫©y c√°c node c√≥ gi√° tr·ªã l·ªõn h∆°n l√™n tr√™n)
     *
     * üåü Xem th√™m v·ªÅ c√°ch hi·ªán th·ª±c heap t·∫°i: geeksforgeeks.org/building-heap-from-array
     */

    // X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa internal node cu·ªëi c√πng
    const lastInternalNodeIndex = Math.floor(array.length / 2) - 1;

    // Loop t·ª´ lastInternalNodeIndex t·ªõi root v√† heapify t·∫°i m·ªói node
    for (let i = lastInternalNodeIndex; i >= 0; i--) {
      if (this.heapType === 'minHeap') {
        this._heapifyMin(array, i);
      } else {
        this._heapifyMax(array, i);
      }
    }

    return array;
  } // O(nlogn)

  _heapifyMax(arr, i) {
    // x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa node hi·ªán t·∫°i v√† c√°c node tr√°i ph·∫£i c·ªßa node trong m·∫£ng
    let largestIndex = i;
    let leftIndex = this._leftIndex(i);
    let rightIndex = this._rightIndex(i);

    // x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa node c√≥ gi√° tr·ªã l·ªõn nh·∫•t trong 3 node
    if (leftIndex < arr.length && arr[largestIndex] < arr[leftIndex]) largestIndex = leftIndex;
    if (rightIndex < arr.length && arr[largestIndex] < arr[rightIndex]) largestIndex = rightIndex;

    // ƒêi·ªÉm d·ª´ng: n·∫øu node c√≥ gi√° tr·ªã l·ªõn nh·∫•t l√† node hi·ªán t·∫°i r·ªìi th√¨ end
    if (i === largestIndex) return;

    // Ho√°n ƒë·ªïi node hi·ªán t·∫°i v·ªõi node c√≥ gi√° tr·ªã l·ªõn nh·∫•t
    this._swap(arr, i, largestIndex);

    // ƒê·ªá quy xu·ªëng c√°c c√¢y con b√™n d∆∞·ªõi
    this._heapifyMax(arr, largestIndex);
  } // O(logn)

  _heapifyMin(arr, i) {
    // x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa node hi·ªán t·∫°i v√† c√°c node tr√°i ph·∫£i c·ªßa node trong m·∫£ng
    let smallestIndex = i;
    let leftIndex = this._leftIndex(i);
    let rightIndex = this._rightIndex(i);

    // x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa node c√≥ gi√° tr·ªã nh·ªè nh·∫•t trong 3 node
    if (leftIndex < arr.length && arr[smallestIndex] > arr[leftIndex]) smallestIndex = leftIndex;
    if (rightIndex < arr.length && arr[smallestIndex] > arr[rightIndex]) smallestIndex = rightIndex;

    // ƒêi·ªÉm d·ª´ng: n·∫øu node c√≥ gi√° tr·ªã nh·ªè nh·∫•t l√† node hi·ªán t·∫°i r·ªìi th√¨ end
    if (i === smallestIndex) return;

    // Ho√°n ƒë·ªïi node hi·ªán t·∫°i v·ªõi node c√≥ gi√° tr·ªã nh·ªè nh·∫•t
    this._swap(arr, i, smallestIndex);

    // ƒê·ªá quy xu·ªëng c√°c c√¢y con b√™n d∆∞·ªõi
    this._heapifyMin(arr, smallestIndex);
  } // O(logn)

  // d·ªãch chuy·ªÉn ph·∫ßn ·ªü v·ªã tr√≠ index l√™n tr√™n
  // ƒë·ªëi v·ªõi maxHeap, ta ƒë·∫©y l√™n tr√™n khi cha nh·ªè h∆°n con
  // ƒë·ªëi v·ªõi minHeap, ta ƒë·∫©y l√™n tr√™n khi cha l·ªõn h∆°n con
  // b·∫£n ch·∫•t c·ªßa shiftUp c≈©ng ch√≠nh l√† 1 c√°ch heapify (khi ph·ªëi h·ª£p v·ªõi vi·ªác loop t·ª´ tr√™n xu·ªëng - top down)
  _shiftUp(index) {
    // TH1: heap l√† max heap
    if (this.heapType === 'maxHeap') {
      while (index > 0 && this.data[this._parentIndex(index)] < this.data[index]) {
        this._swap(this.data, index, this._parentIndex(index));
        index = this._parentIndex(index);
      }
    }
    // TH2: heap l√† min heap
    else {
      while (index > 0 && this.data[this._parentIndex(index)] > this.data[index]) {
        this._swap(this.data, index, this._parentIndex(index));
        index = this._parentIndex(index);
      }
    }
  } // O(logn)

  // shiftDown ƒë·∫©y 1 node xu·ªëng v·ªã tr√≠ ph√π h·ª£p
  // b·∫£n ch·∫•t c·ªßa h√†m shiftDown ch√≠nh l√† c√°ch heapify (khi ph·ªëi h·ª£p v·ªõi vi·ªác loop t·ª´ d∆∞·ªõi l√™n - bottom up)
  _shiftDown(index) {
    // TH1: heap l√† max heap
    if (this.heapType === 'maxHeap') {
      this._heapifyMax(this.data, index);
    }
    // TH2: heap l√† min heap
    else {
      this._heapifyMin(this.data, index);
    }
  } // O(logn)

  // tr·∫£ v·ªÅ index c·ªßa cha
  _parentIndex(index) {
    return Math.floor((index - 1) / 2);
  } // O(1);

  // tr·∫£ v·ªÅ index c·ªßa con b√™n tr√°i
  _leftIndex(index) {
    return index * 2 + 1;
  } // O(1);

  // tr·∫£ v·ªÅ index c·ªßa con b√™n ph·∫£i
  _rightIndex(index) {
    return index * 2 + 2;
  } // O(1);

  _swap(arr, oldIndex, newIndex) {
    const temp = arr[oldIndex];
    arr[oldIndex] = arr[newIndex];
    arr[newIndex] = temp;
  } // O(1)
}

const myHeap = new Heap([7, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17], 'maxHeap');
console.log(myHeap.data);

myHeap.remove(2);

console.log(myHeap.data);
